Android sample dev key: 5961e1d969a94727a8ef4c8a6d2bea63 region:chinaeast2;

AudioDataStream audioDataStream = AudioDataStream.fromResult(result);
audioDataStream.saveToWavFile("/storage/emulated/0/Download/tts/microsoft.wav");

ExecuteSynthesis: audio duration 结束标志


large corpus for every language:https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TTSTestLargeCorpus

！！！以后提交pr，需要Squash commit！！！！！！！！！！！！！！！！！
给customer更新的时候注意： Tokens.xml里面的project名字；.ini里面的throttling；

http://stcvm-h84:8081/ 没有这个的权限，看看去公司有没有；

https://github.com/Azure-Samples/cognitive-services-speech-sdk  Public samples for all platforms;

TTS展示页面：
https://docs.microsoft.com/zh-cn/azure/cognitive-services/speech-service/speech-synthesis-markup?tabs=csharp 
https://azure.microsoft.com/zh-cn/services/cognitive-services/text-to-speech/#overview

我们的tts engine 的linux build 基于 gcc7.5 ubentu18.04

Host V-ciguo
  HostName stcvl-212
  User v-ciguopassword
password= Pass_word
一台linux的虚拟机，密码Pass_word

export LD_LIBRARY_PATH=../SDK/public/lib


As we discussed, we need to enhance the test on Stop API. Here’s some thought in my mind:
1.	We need to test the stop on random timing:
a.	Ensure stop really works: verified through output audio and event.
b.	Ensure no error: check return value, no hanging happen.
c.	Ensure the next speak after stop is success and output is expected.
2.	We need to test the stop on different input:
a.	Using different prosody tag with different pitch, rate and volume.
b.	Ensure the next speak after stop is success and output is expected.

git sparse？
申请一个wifi？
学习下java future？.git为什么大？
学习windows 批处理程序；
一个bug:ssml调rate不是按1%的梯度； durationpredictor.cpp852行
GAC更新stop的改动，devicettsrelease也更新？
carAssistant?
lixiang的实车测试stop延迟3秒问题；
gac给他们三个ini挑；


  private void stopSynthesizing() {
        Future<Void> stopFuture = null;
        if (synthesizer != null) {
            stopFuture = synthesizer.StopSpeakingAsync();
        }
        if (audioTrack != null) {
            synchronized (synchronizedObj) {
                stopped = true;
            }
            audioTrack.pause();
            audioTrack.flush();
        }
        if (stopFuture != null) {
            try {
                stopFuture.get();
            } catch (Exception ex) {
                Log.e("Speech Synthesis Demo", "exception while stopspeaking" + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }

<speak xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' version='1.0' xml:lang='zh-CN'><voice name='zh-CN-YunxiNeural' style='Cheerful' rate='3%'><prosody rate='6%'>您有电话来自13752533002，接听还是挂断?</prosody></voice></speak>

6%rate fnumber 0.530385911 
7%rate fnumber 0.615855992
16% 1.3509
17% 1.42910945

10%pitch 1.100

long lRate = ProsodyHelper::CalculateRate(pWord->m_pFragment->state.pProsody->rate);


char ssml[] = "<?xml version='1.0'?><speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd' xml:lang='en-US'>\
		<prosody rate='7%' pitch='12%'>This approach is also evident in the use of XML as the data.</prosody></speak>";
error = pIMSSpeechSynthesize->Speak(ssml, MSTTSContentType_SSML, &nTotalCharSpoken);

rate.flNumber 


//Note: Use these lines to call Stop synchronously before starting a new speak
                    //if (synthesizer != null) {
                    //    synthesizer.StopSpeakingAsync().get();
                    //}

42876 147次 我在呢</voice></speak>
42378 146次  request id: 26269446cc7442d283c212ad027e79b4; text:  哈喽</voice></speak>

underrun 42708 -- 42861

40673有问题

4432 下次synthesis 5424

if(NOT ENABLE_UWP)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../Test/Functional tests/Functional)
endif()

