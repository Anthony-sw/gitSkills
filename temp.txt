！！！！！！！！！！！！！！！！！！！！！！！
项目地址
https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TextToSpeechMain
官方文档：
https://docs.microsoft.com/zh-cn/
https://docs.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170 函数
Azure Pipelines :(Yaml格式）
https://docs.microsoft.com/zh-cn/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure-devops
========================================================
D盘空间 除了temp origin original 约15G
可用的windows虚拟机 stcsrv-G64


CoreXT的cache包：https://msasg.visualstudio.com/TextToSpeech/_git/CoreXtPkgs

https://www.zhihu.com/question/444825341 java学习路径

整个build的pipeline   https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TextToSpeechMain?path=/ci/azure-pipelines.yml

adb shell，Android系统的shell,待学习；

carbon build参考 : https://msasg.visualstudio.com/Skyman/_build/results?buildId=27087930&view=artifacts&pathAsName=false&type=publishedArtifacts
                  D:\Carbon\ci\build-windows.yml

NIO的repo地址： https://speechoutput.visualstudio.com/_git/Customer_NIO 

HH的repo地址：https://speechoutput.visualstudio.com/Customer_HiPhi/_git/Customer_HiPhi

GWM的repo地址： https://speechoutput.visualstudio.com/_git/Customer_GWM

#Build TTS Reader:
1.改..\TTS Reader (Carbon)\TTS Reader (Carbon)  TTS Reader (Carbon).csproj 11行v4.7.2 ;61行 "Microsoft.CognitiveServices.Speech.csharp" ;替换所有1.20.0
2.TTS Reader (Carbon)\TTS Reader (Carbon)\packages.config 改为新版本
3.Form1.cs 改方法名SetSpeechSynthesisVoice 第44 86行
4.TTS Reader (Carbon)\TTS Reader (Carbon)\bin\x64\Debug 里加个Voices文件夹，加Font进去

#Build TextToSpeechMain, cmake 
1.TextToSpeechMain\external\onnx_runtime 加onnx包,onnx包在Artifacts里搜rnnt.onnxruntime
2.TextToSpeechMain\private\dev\speech\tts\shenzhou\Platforms\VsBuilds\build\cmake\bin\Debug 加个onnx的.dll
3.如果是-D BUILD_TARGET=EmbeddedLegacy或embeded，Font都不能用neural的否则报错

#Android studio 改java jdk版本，file - project structure - sdk location最下面jdk location;
1.sample 新老版本注意 EmbeddedSpeechConfig embeddedSpeechConfig = EmbeddedSpeechConfig.fromPath(yourOfflineDataPath); 老版本没有这句


2.21 看git文档 ；测试BYD 调系统时间无法调用在线语音问题的，测具体多久会不行；
2.22 测试Yulin的NDK; 测试th-th model; update sdk in DeviceTTSRelease
2.23 debug carbon(调试dll,在carbon里加断点)；更新版本D:\DeviceTTSRelease\tools\TTS Reader (Carbon)到 1.21，改动见 #Build TTS Reader
2.24 还是debug carbon；测试两句话在Android phone上
2.25 在temp里重新clone，建分支，build；debug 离线tts;build carbon没成功

2.28 帮 yuntong 高合HiPhi： build sample，查看log解决不出声的问题；
3.1 看菜鸟教程 java,看到正则表达式；
NEW TASK: UTest迁移到Windows平台
https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain/pullrequest/2654672?_a=files xudong的pr
https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain?path=/ci/Funcational-Rolling-Test.yml Windows平台的pipeline
https://msasg.visualstudio.com/TextToSpeech/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=12421&view=Tab_Tasks Linux平台的pipeline
https://msasg.visualstudio.com/TextToSpeech/_git/PortableTTSTestDrop?path=/utest/testdata UTest的data
怎样调试UTest: Debug - xxx Debug Properties - Debugging - Working directory 改为.exe所在的目录 
改了 ！！！D:\origin\TextToSpeechMain\SpeechXWindows\private\dev\xwindows\xwin.cpp 中的copyfile deletefile movefile，UnitLatticeGeneration通过
	加了xwin.cpp 中 GetTempFileName函数； BoundaryToneTaggerTest 编译过
	....\utest\CompoundWordBreaker\Compoundwordbreakertest.cpp 338行等三行 _wfopen_s加了ccs="UTF-8"，Compoundwordbreakertest通过；
	BoundaryToneTaggerTest.cpp 两个case分别加 UTF_VERIFY(CTestUtil::CompareTextFile加了个 或||，上面加个文件；
		下面的case，if (fExisted){}里面改了，不再用GetTempFileName函数；
	xwin.cpp中 加struct XWIN_HANDLE，CreateFileW ,GetFileType；删了

3.2 UTest相关：看func-roll-test.yml,看cmake;
3.3 学习cmake,看windows和linux的utest的cmakelists; cmake在-DBUILD_TARGET=Embedded编译不过，EmbeddedLegacy才过；
3.4 试图编译过

3.7 utest；测了一遍xudong的，有一个failed，UnitLatticeGeneration; 在根目录下可以embeded编译过，不知道为啥？
3.8 D:\origin\TextToSpeechMain\SpeechXWindows\private\dev\xwindows\xwin.cpp 中的copyfile deletefile movefile; UnitLatticeGeneration通过
utest目录大小写不敏感？EnhancedSSML
3.9 CompareBinaryFile 很难搞，需要debug进engine；debug UTest: acousticprosodytagger  DNNDecoder
申请一个wifi？
3.10 Customer_几何 那边测了下apk和sample; 弄懂git overwritten和stash;改 acousticprosodytagger
xwin.cpp里的CopyFile 的if还是需要!access ？因为acousticprosodytaggertest.cpp 1191行
3.11 customer几何,帮他们build sample,解决了online connect failed问题; 罗列utest问题
！！！以后提交pr，需要Squash commit！！！！！！！！！！！！！！！！！

3.14 在linux上debug UTest；debug CompoundWordBreaker;
Host V-ciguo
  HostName stcvl-212
  User v-ciguopassword
password= Pass_word
一台linux的虚拟机，密码Pass_word
3.15 Compoundwordbreakertest通过；CompareTextFile没解决；换了一套testdata
3.16 加了俩cmakelist: PolyphonyModelPronunciationChecker和NeuralCRFWordBreaker; BoundaryToneTaggerTest改了一个failed；换成TTSShenzhouDataDrop的testdata不行；
UTest 名称与哪相同？文件夹还是cpp？
3.17 学习git submodule; BoundaryToneTagger另一个failed是xwin.cpp缺CreateFileW；不是缺createfilew,是code本来有问题，本来就绕过了backup.
3.18 try to fix BoundaryToneTagger; 测试怎样改cmake编译快;

3.21 找为啥xwin.cpp加了CreateFileW等函数，pEngine反而failed： 因为windows没有用xwin.cpp里面的实现，直接用的系统实现； 改BoundaryToneTagger
3.22 为啥createfile可以用windows实现，copyfile不能？一部分一部分？；include winbase.h后redifine; CompareTextFile过了3 UT
3.23 UT 看vocoder；the NIO stop latency issue,repro;
3.24 the NIO stop latency issue:Guangyu fixed(https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain/pullrequest/2848462?_a=files&iteration=2&base=1)
	更新长城的sample，但是crash；
3.25 还是the NIO stop latency issue；更新长城的sample；

3.28 改BoundaryToneTagger,为啥没有backup？；the NIO stop latency issue ,test, Guangyu解决了
3.29 BoundaryToneTagger,CopyFileW改了，remove不行；xwin.cpp deletefile加了errno; after get default engine, cannot remove 1033.BRK; 
3.30 debug CustomerTN, .dat不对，但用shenzhouDataDrop就过了； 
Jinzhu said: 查为啥输出utf16,输出utf8，两边都用xwin。
3.31 libxml里面的utf格式名称：D:\origin\TextToSpeechMain\external\libxml2\encoding.c 1432行左右；BoundaryToneTagger的multiDoc.Load 调用外部库的libxml的xmlReadFile；
找了一天没找到为啥输出actual是utf16的？？不应该是utf8了吗;
4.1 找到了，BoundaryToneTagger的输出是utf16，因为baseclass.cpp里open函数里，_wfopen_s(&pFile, pwzFile, _T("wb,ccs=UTF-8")),已经是rb了，ccs设置无效了；
linux 编译UT没过； 自己写个新的.c没有头文件跑不成
4.2 build linux UT; update SDK for NIO; BoundaryToneTagger可以生成utf8，那prgate不就挂了？；baseclass改了CustomerTN直接过； 看vocoder；

4.6 git sparse没搞懂；debug vocoder; build linux UT: 1.linux build:cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded CMakeLists.txt
4.7 查 改了baseclass，prgate不过的问题：PolyphonyHandling； 看标贝的 offlineTTS

标贝：f866fd0fccf44076a5fb9a874fafb2db ID:c0035080f332460583f96520d2cab5aa

cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded -DBUILD_STATIC_LIB=ON -DENABLE_UT=ON -DLomiJA_TARGET_PLATFORM=x64 CMakeLists.txt

cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded -DBUILD_STATIC_LIB=ON -DENABLE_UT=ON -DLomiJA_TARGET_PLATFORM=x64 ../private/dev/speech/tts/shenzhou/Platforms/VsBuilds/build/cmake -B.

set(RepoRoot /D/temp/TextToSpeechMain)
message(STATUS "????RepoRoot=${RepoRoot}")


//改过的xwin.cpp,3.8
#ifdef __GNUC__
#include <unistd.h> //int access(const char *filenpath, int mode)
#elif _MSC_VER
#include<io.h>  // int _access( const char *path, int mode ) 
#endif 
WINBASEAPI
BOOL
WINAPI
CopyFileW(
	_In_ LPCWSTR lpExistingFileName,
	_In_ LPCWSTR lpNewFileName,
	_In_ BOOL bFailIfExists
)
{
	try
	{
		char cNewFileName[MAX_PATH];
		memset(cNewFileName, 0, MAX_PATH);
		int nBytes = WideCharToMultiByte(CP_UTF8, 0, lpNewFileName, wcslen(lpNewFileName), cNewFileName, MAX_PATH, NULL, NULL);
		cNewFileName[nBytes] = 0;

		char cExistingFileName[MAX_PATH];
		memset(cExistingFileName, 0, MAX_PATH);
		nBytes = WideCharToMultiByte(CP_UTF8, 0, lpExistingFileName, wcslen(lpExistingFileName), cExistingFileName, MAX_PATH, NULL, NULL);
		cExistingFileName[nBytes] = 0;

        #ifdef __GNUC__
        if (bFailIfExists && access(cNewFileName, 0))
        {
            return FALSE;
        }
        #elif _MSC_VER
        if (bFailIfExists && _access(cNewFileName, 0))
        {
            return FALSE;
        }
        #endif 
		
		FILE *fp1;
		fp1 = fopen(cExistingFileName, "r");
		FILE *fp2;
		fp2 = fopen(cNewFileName, "w");

		char buff[1024] = { '\0' };
		int count = 0;
		while ((count = fread(buff, 1, 1024, fp1)) != 0)
		{
			fwrite(buff, 1, count, fp2);
		}

		fclose(fp1);
		fclose(fp2);

		return TRUE;
	}
	catch (...)
	{
		return FALSE;
	}
}
