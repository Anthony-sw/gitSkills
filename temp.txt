！！！！！！！！！！！！！！！！！！！！！！！
项目地址
https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TextToSpeechMain
官方文档：
https://docs.microsoft.com/zh-cn/
https://docs.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170 函数
Azure Pipelines :(Yaml格式）
https://docs.microsoft.com/zh-cn/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure-devops
========================================================
D盘空间 除了temp origin original 约15G
可用的windows虚拟机 stcsrv-G64


CoreXT的cache包：https://msasg.visualstudio.com/TextToSpeech/_git/CoreXtPkgs

https://www.zhihu.com/question/444825341 java学习路径

整个build的pipeline   https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TextToSpeechMain?path=/ci/azure-pipelines.yml


carbon build参考 : https://msasg.visualstudio.com/Skyman/_build/results?buildId=27087930&view=artifacts&pathAsName=false&type=publishedArtifacts
                  D:\Carbon\ci\build-windows.yml

NIO的repo地址： https://speechoutput.visualstudio.com/_git/Customer_NIO 
BYD的：https://speechoutput.visualstudio.com/Customer_BYD/_git/Customer_BYD?path=%2F&version=GBrelease%2F20220426&_a=contents

HH的repo地址：https://speechoutput.visualstudio.com/Customer_HiPhi/_git/Customer_HiPhi

GWM的repo地址： https://speechoutput.visualstudio.com/_git/Customer_GWM

large corpus for every language:https://msasg.visualstudio.com/DefaultCollection/TextToSpeech/_git/TTSTestLargeCorpus

#v-dongyueli tokens：https://dev.azure.com/corext/_usersSettings/tokens

#c++ skills: string类型 .c_str() 转为char*

#git
1.查看远程分支对应： git branch -va 或 -vv;
2.清除远程已删除本地还在的多余分支  git fetch -p
3.上传lfs的大文件文件出client error: git config http.version HTTP/1.1 

#Build TTS Reader:
1.改..\TTS Reader (Carbon)\TTS Reader (Carbon)  TTS Reader (Carbon).csproj 11行v4.7.2 ;61行 "Microsoft.CognitiveServices.Speech.csharp" ;替换所有1.20.0
2.TTS Reader (Carbon)\TTS Reader (Carbon)\packages.config 改为新版本
3.Form1.cs 改方法名SetSpeechSynthesisVoice 第44 86行
4.TTS Reader (Carbon)\TTS Reader (Carbon)\bin\x64\Debug 里加个Voices文件夹，加Font进去

#Build TextToSpeechMain, cmake 
1.TextToSpeechMain\external\onnx_runtime 加onnx包,onnx包在Artifacts里搜rnnt.onnxruntime
2.TextToSpeechMain\private\dev\speech\tts\shenzhou\Platforms\VsBuilds\build\cmake\bin\Debug 加个onnx的.dll
3.如果是-D BUILD_TARGET=EmbeddedLegacy或embeded，Font都不能用neural的否则报错

#Android studio 改java jdk版本，file - project structure - sdk location最下面jdk location;
1.sample 新老版本注意 EmbeddedSpeechConfig embeddedSpeechConfig = EmbeddedSpeechConfig.fromPath(yourOfflineDataPath); 老版本没有这句

#build linux UT,cmake: 
1.linux build cmake :cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded CMakeLists.txt
2.linux utest cmake :-DCMAKE_BUILD_TYPE=Debug -DBUILD64=1 CMakeLists.txt
3.需要在onnx里面加 MS.TTS.NeuralTTS.ONNXLib.(在artifact- TextToSpeech里搜一下)


2.21 看git文档 ；测试BYD 调系统时间无法调用在线语音问题的，测具体多久会不行；
2.22 测试Yulin的NDK; 测试th-th model; update sdk in DeviceTTSRelease
2.23 debug carbon(调试dll,在carbon里加断点)；更新版本D:\DeviceTTSRelease\tools\TTS Reader (Carbon)到 1.21，改动见 #Build TTS Reader
2.24 还是debug carbon；测试两句话在Android phone上
2.25 在temp里重新clone，建分支，build；debug 离线tts;build carbon没成功

2.28 帮 yuntong 高合HiPhi： build sample，查看log解决不出声的问题；
3.1 看菜鸟教程 java,看到正则表达式；
NEW TASK: UTest迁移到Windows平台
https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain/pullrequest/2654672?_a=files xudong的pr
https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain?path=/ci/Funcational-Rolling-Test.yml Windows平台的pipeline
https://msasg.visualstudio.com/TextToSpeech/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=12421&view=Tab_Tasks Linux平台的pipeline
https://msasg.visualstudio.com/TextToSpeech/_git/PortableTTSTestDrop?path=/utest/testdata UTest的data
怎样调试UTest: Debug - xxx Debug Properties - Debugging - Working directory 改为.exe所在的目录 
改了 ！！！D:\origin\TextToSpeechMain\SpeechXWindows\private\dev\xwindows\xwin.cpp 中的copyfile deletefile movefile，UnitLatticeGeneration通过
	加了xwin.cpp 中 GetTempFileName函数； BoundaryToneTaggerTest 编译过
	....\utest\CompoundWordBreaker\Compoundwordbreakertest.cpp 338行等三行 _wfopen_s加了ccs="UTF-8"，Compoundwordbreakertest通过；
	BoundaryToneTaggerTest.cpp 两个case分别加 UTF_VERIFY(CTestUtil::CompareTextFile加了个 或||，上面加个文件；
		下面的case，if (fExisted){}里面改了，不再用GetTempFileName函数；
	xwin.cpp中 加struct XWIN_HANDLE，CreateFileW ,GetFileType；删了

3.2 UTest相关：看func-roll-test.yml,看cmake;
3.3 学习cmake,看windows和linux的utest的cmakelists; cmake在-DBUILD_TARGET=Embedded编译不过，EmbeddedLegacy才过；
3.4 试图编译过

3.7 utest；测了一遍xudong的，有一个failed，UnitLatticeGeneration; 在根目录下可以embeded编译过，不知道为啥？
3.8 D:\origin\TextToSpeechMain\SpeechXWindows\private\dev\xwindows\xwin.cpp 中的copyfile deletefile movefile; UnitLatticeGeneration通过
utest目录大小写不敏感？EnhancedSSML
3.9 CompareBinaryFile 很难搞，需要debug进engine；debug UTest: acousticprosodytagger  DNNDecoder
申请一个wifi？
3.10 Customer_几何 那边测了下apk和sample; 弄懂git overwritten和stash;改 acousticprosodytagger
xwin.cpp里的CopyFile 的if还是需要!access ？因为acousticprosodytaggertest.cpp 1191行
3.11 customer几何,帮他们build sample,解决了online connect failed问题; 罗列utest问题
！！！以后提交pr，需要Squash commit！！！！！！！！！！！！！！！！！

3.14 在linux上debug UTest；debug CompoundWordBreaker;
Host V-ciguo
  HostName stcvl-212
  User v-ciguopassword
password= Pass_word
一台linux的虚拟机，密码Pass_word
3.15 Compoundwordbreakertest通过；CompareTextFile没解决；换了一套testdata
3.16 加了俩cmakelist: PolyphonyModelPronunciationChecker和NeuralCRFWordBreaker; BoundaryToneTaggerTest改了一个failed；换成TTSShenzhouDataDrop的testdata不行；
UTest 名称与哪相同？文件夹还是cpp？
3.17 学习git submodule; BoundaryToneTagger另一个failed是xwin.cpp缺CreateFileW；不是缺createfilew,是code本来有问题，本来就绕过了backup.
3.18 try to fix BoundaryToneTagger; 测试怎样改cmake编译快;

3.21 找为啥xwin.cpp加了CreateFileW等函数，pEngine反而failed： 因为windows没有用xwin.cpp里面的实现，直接用的系统实现； 改BoundaryToneTagger
3.22 为啥createfile可以用windows实现，copyfile不能？一部分一部分？；include winbase.h后redifine; CompareTextFile过了3 UT
3.23 UT 看vocoder；the NIO stop latency issue,repro;
3.24 the NIO stop latency issue:Guangyu fixed(https://msasg.visualstudio.com/TextToSpeech/_git/TextToSpeechMain/pullrequest/2848462?_a=files&iteration=2&base=1)
	更新长城的sample，但是crash；
3.25 还是the NIO stop latency issue；更新长城的sample；

3.28 改BoundaryToneTagger,为啥没有backup？；the NIO stop latency issue ,test, Guangyu解决了
3.29 BoundaryToneTagger,CopyFileW改了，remove不行；xwin.cpp deletefile加了errno; after get default engine, cannot remove 1033.BRK; 
3.30 debug CustomerTN, .dat不对，但用shenzhouDataDrop就过了； 
Jinzhu said: 查为啥输出utf16,输出utf8，两边都用xwin。
3.31 libxml里面的utf格式名称：D:\origin\TextToSpeechMain\external\libxml2\encoding.c 1432行左右；BoundaryToneTagger的multiDoc.Load 调用外部库的libxml的xmlReadFile；
找了一天没找到为啥输出actual是utf16的？？不应该是utf8了吗;
4.1 找到了，BoundaryToneTagger的输出是utf16，因为baseclass.cpp里open函数里，_wfopen_s(&pFile, pwzFile, _T("wb,ccs=UTF-8")),已经是rb了，ccs设置无效了；
linux 编译UT没过； 自己写个新的.c没有头文件跑不成
4.2 build linux UT; update SDK for NIO; BoundaryToneTagger可以生成utf8，那prgate不就挂了？；baseclass改了CustomerTN直接过； 看vocoder；

4.6 git sparse没搞懂；debug vocoder; 
4.7 查 改了baseclass，prgate不过的问题：PolyphonyHandling； 看标贝的 offlineTTS
4.8 发pr，baseclass过了；看标贝

4.11 repro NIO stop30ms卡死 ; 改pr,改compoundwordbreaker通过prgate; 抓标贝的 first、rtf,没成功，java不会写; 
4.12 改pr，规范代码，重构cmakelists,没重构好; try to dump 标贝,成功dump raw data;
4.13 重构cmakelists,很花时间但没成功；抓标贝的wav和log；
4.14 成功重构cmakelists；标贝更新github，抓firstbyteLatency;我们的xiaoxiaoV5,fbl 126 127 124 127,rtf 0.1673 0.1665 0.1684 0.1706;
标贝 短句：22 0.5032；40 0.5297；长句 34 0.4812；36 0.48；
4.15 看lixiang的crash log，但没看懂；debug UT EmotionalNUS pass, codec 没有；

4.18 debug UT: codec pass,换行在linux和windows不同; acoustic没有；
4.19 debug acoustic; 写月task;
问Cindy：git sparse？
4.20 在家moyu；看forignwordTest;
4.21 看functionalTest.cpp 里的stop函数；新加了几个UT，应该都是acoustic问题；
4.22 HTSVoiceData pass; build Linux UT成；repro NIO 儿化音 crash；ttsTN编译不过 重定义，没搞懂；看pthread

4.24 上传TTSTestLargeCorpus；改functionalTest.cpp 里的stop函数
学习下java future？.git为什么大？
4.25 test new small zhcn_model for NIO in large corpus; fbl 68ms;rtf 0.0417 disable throttling;9200字perf 28min左右；
第二次：fbl 75ms;rtf 0.0381;10349字；33min；测试、更新BYD;
4.26 functionalTest：stop; NIO小model首包延迟大问题;xiaoxiao:40ms 0.7129| 37ms 0.7021  ;chanfei:0.39 0.7374| 0.37 0.7341
4.27 1.19arr实验小model：Xiaoxiao：57ms 0.7096; 49ms 0.7117; Chanfei:54ms 0.7707;46ms 0.7651; 看adb; moyu一下午;
4.28 验证lixiang离在线font设置不一致可以？可以；测试BYD声音切离线变小？可以font里.ini设置； 写functional.cpp stop;
手机里xiaoxiaodevice改了.ini的VolumeAdjustment；NIO的chanfei首包延迟大没repro？？
学习windows 批处理程序；

标贝：f866fd0fccf44076a5fb9a874fafb2db ID:c0035080f332460583f96520d2cab5aa


As we discussed, we need to enhance the test on Stop API. Here’s some thought in my mind:
1.	We need to test the stop on random timing:
a.	Ensure stop really works: verified through output audio and event.
b.	Ensure no error: check return value, no hanging happen.
c.	Ensure the next speak after stop is success and output is expected.
2.	We need to test the stop on different input:
a.	Using different prosody tag with different pitch, rate and volume.
b.	Ensure the next speak after stop is success and output is expected.


cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded -DBUILD_STATIC_LIB=ON -DENABLE_UT=ON -DLomiJA_TARGET_PLATFORM=x64 CMakeLists.txt

cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DBUILD_TARGET=Embedded -DBUILD_STATIC_LIB=ON -DENABLE_UT=ON -DLomiJA_TARGET_PLATFORM=x64 ../private/dev/speech/tts/shenzhou/Platforms/VsBuilds/build/cmake -B.

void* TestStop(void* pIMSSpeechSynthesize)
{
    srand((unsigned int)time(0));
    unsigned int sleep_length = rand() % 2000 + 1;
#ifdef __GNUC__
	sleep(sleep_length);
#else
    Sleep(sleep_length);
    printf("sleep for %d ms\n", sleep_length);
#endif
    HRESULT hr = S_OK;
    hr = ((IMSSpeechSynthesize*)pIMSSpeechSynthesize)->Stop();
    //UTF_VERIFY_HR(hr);
 
	pthread_exit(NULL);
    
    return NULL;
}

  //Voicebaseline
    SpeakFunction(pIMSSpeechSynthesize, ttsOutputWavFile, MSTTSContentType_PlainText, string("Functional.cpp.stop.Long.BaseLine.wav"), TestConfig.LongStringPath);
    ULONG64 sizebaseline = GetFileSize(_T("Functional.cpp.stop.Long.BaseLine.wav"));

    pthread_t thread;
	int error = 1;
    CTTSString outputFileName;
	for (int i = 0; i < 10; i++)
	{
		error = pthread_create(&thread, NULL, TestStop, (void*)pIMSSpeechSynthesize);
		if (error != 0)
		{
			printf("Error:unable to create thread");
		}
        char pBuffer[GENERAL_BUFFER_SIZE];
        sprintf(pBuffer, "Functional.cpp.stop.Long.No%d.wav", i);
		UTF_VERIFY_HR(SpeakFunction(pIMSSpeechSynthesize, ttsOutputWavFile, MSTTSContentType_PlainText,
			string(pBuffer), TestConfig.LongStringPath));
        outputFileName.AppendAHR(pBuffer);
        ULONG64 sizeStopRandom = GetFileSize(outputFileName);
        UTF_VERIFY(sizeStopRandom< sizebaseline);

		pthread_join(thread, NULL);
	}
    

WCHAR actual_pron[TTS_MAX_PRON_LENGTH] = {NULL};
        wcscpy_s(actual_pron, pWord->GetPron());


//BoundaryToneTagger的没法backup的问题
if (fExisted)
    {
        fileBackupHelper.Backup();
        //FILE* fp1;
        //fp1 = fopen("./testdata/RUSVoiceFont/1033.BRK", "rb");
        //fclose(fp1);
        //if(remove("./testdata/RUSVoiceFont/1033.BRK")==0)
        //    printf("Wooo");
        DeleteFile(brkfilename);
    }

    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/acousticprosodytagger utest/acousticprosodytagger)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/BoundaryToneTagger utest/BoundaryToneTagger)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/codec utest/codec)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/DNNDecoder utest/DNNDecoder) 
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/EmotionalNUS utest/EmotionalNUS)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../../../utest/foreignwords utest/foreignwords)   